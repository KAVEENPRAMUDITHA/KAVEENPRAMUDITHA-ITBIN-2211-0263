/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import controller.CarRentController;
import Model.CarRentModel;
import Model.CarRentModel.RentDetails;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author Asus
 */
public class CarRent extends javax.swing.JFrame {
   private final CarRentController controller;
   
   private int getNextRentID() {
        int nextRentID = 1; // Default value if no records exist
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/car_rental", "root", "")) {
            String query = "SELECT MAX(rentID) AS max_rentID FROM rentcar";
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                nextRentID = rs.getInt("max_rentID") + 1;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return nextRentID;
    }
    /**
     * Creates new form CustomerRecords
     */
    public CarRent() {
        initComponents();
        CarRentModel model = new CarRentModel();
        controller = new CarRentController(model, this);
       
        rentTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            rentTableMouseClicked(evt);
        }
    });
    }

    public void setRentID(int RentID) {
        rentID.setText(String.valueOf(RentID));
    }

    public void setCustomerName(String customerName) {
        cusName.setText(customerName);
    }

    public void setCarDetails(String CarModel, String Availability, double Price) {
        carModel.setText(CarModel);
        availability.setText(Availability);
        price.setText(String.valueOf(Price));
    }

    public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    public void clearFields() {
        rentID.setText("");
        registrationID.setText("");
        cusName.setText("");
        carID.setText("");
        carModel.setText("");
        rentDate.setDate(null);
        dueDate.setDate(null);
        availability.setText("");
        price.setText("");
    }

    public void addTableRows(List<RentDetails> rentDetailsList) {
        DefaultTableModel model = (DefaultTableModel) rentTable.getModel();
        model.setRowCount(0); // Clear existing data
        rentDetailsList.forEach((rentDetails) -> {
            model.addRow(new Object[]{rentDetails.rentID, rentDetails.regID, rentDetails.customerName,
                rentDetails.carID, rentDetails.carModel, rentDetails.rentDate, rentDetails.dueDate});
       });
    }
 private void registrationIDKeyReleased(java.awt.event.KeyEvent evt) {
        String regID = registrationID.getText().trim();
        controller.loadCustomerName(regID);
    }

    private void carIDKeyReleased(java.awt.event.KeyEvent evt) {
        String carIDText = carID.getText().trim();
        controller.loadCarDetails(carIDText);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rentTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        registrationID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cusName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        carID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        rentDate = new com.toedter.calendar.JDateChooser();
        dueDate = new com.toedter.calendar.JDateChooser();
        updateBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        carModel = new javax.swing.JTextField();
        availability = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        rentID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        searchBox = new javax.swing.JTextField();
        resetBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(250, 248, 243));
        jPanel1.setForeground(new java.awt.Color(204, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rentTable.setBackground(new java.awt.Color(204, 255, 255));
        rentTable.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));
        rentTable.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rentTable.setForeground(new java.awt.Color(102, 0, 0));
        rentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rent ID ", "Registation ID", "Customer Name", "CarID", "Car Model", "Rent Date", "Due Date"
            }
        ));
        rentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rentTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 510, 540));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fox car.gif"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 0, 510, 220));

        backBtn.setBackground(new java.awt.Color(102, 0, 0));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        jPanel1.add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 710, 130, 40));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 153));
        jLabel2.setText("Registation ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 123, 39));

        registrationID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        registrationID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationIDActionPerformed(evt);
            }
        });
        jPanel1.add(registrationID, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 190, 30));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 153));
        jLabel3.setText("Customer Name ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 240, -1, 30));

        cusName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel1.add(cusName, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, 190, 30));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 153));
        jLabel4.setText("Availability");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 100, 30));

        carID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        carID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carIDActionPerformed(evt);
            }
        });
        jPanel1.add(carID, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, 190, 30));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Rent Date");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, -1, -1));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 153));
        jLabel6.setText("Due Date");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 460, -1, -1));

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 580, 100, 30));

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(153, 0, 51));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jPanel1.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 581, 100, 30));

        rentDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel1.add(rentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 400, 190, 30));

        dueDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel1.add(dueDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 450, 190, 30));

        updateBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jPanel1.add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 580, 100, 30));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 153));
        jLabel7.setText("Car ID");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 86, 30));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Car Model");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 320, 86, 30));

        carModel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        carModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carModelActionPerformed(evt);
            }
        });
        jPanel1.add(carModel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 320, 190, 30));

        availability.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        availability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityActionPerformed(evt);
            }
        });
        jPanel1.add(availability, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 360, 190, 30));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 153));
        jLabel9.setText("Price (per day)");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 500, 120, 30));

        price.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel1.add(price, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 500, 190, 30));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 153));
        jLabel10.setText("Rent ID");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 90, 39));

        rentID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentIDActionPerformed(evt);
            }
        });
        jPanel1.add(rentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, 190, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel11.setText("Rental Car Registration");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 450, 80));

        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });
        jPanel1.add(searchBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 640, 170, 30));

        resetBtn1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resetBtn1.setText("Reset");
        resetBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(resetBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 580, 100, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 766, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        
        Home home = new Home();
           this.hide();
          home.setVisible(true);
          
    }//GEN-LAST:event_backBtnActionPerformed

    private void registrationIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationIDActionPerformed
        
         String registrationIDText = registrationID.getText().trim();
    
    if (!registrationIDText.isEmpty()) {
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/car_rental", "root", "")) {
            String query = "SELECT customerName FROM customers WHERE registrationID = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, registrationIDText);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                // Populate the text fields with the retrieved dat
                cusName.setText(rs.getString("customerName"));
              
            } else {
                // Clear the text fields if no data found for the entered rent ID
                clearFields();
                JOptionPane.showMessageDialog(null, "No data found for the entered rent ID.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error retrieving data from the database: " + e.getMessage());
        }
    } else {
        // Clear the text fields if rent ID field is empty
        clearFields();
    }
    
    
    }//GEN-LAST:event_registrationIDActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String RentID = rentID.getText();
        String regID = registrationID.getText();
        String customerName = cusName.getText();
        String carIDText = carID.getText();
        String CarModel = carModel.getText();
        String RentDate = new SimpleDateFormat("yyyy-MM-dd").format(rentDate.getDate());
        String DueDate = new SimpleDateFormat("yyyy-MM-dd").format(dueDate.getDate());
        double Price = Double.parseDouble(price.getText());
        controller.addRent(RentID, regID, customerName, carIDText, CarModel, RentDate, DueDate, Price);
    }//GEN-LAST:event_addBtnActionPerformed

    private void rentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rentIDActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
       int selectedRow = rentTable.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) rentTable.getModel();
            String rentID = model.getValueAt(selectedRow, 0).toString();
            controller.deleteRent(rentID);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void availabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
         int selectedRow = rentTable.getSelectedRow();
    if (selectedRow >= 0) {
        String RentID = rentID.getText();
        String regID = registrationID.getText();
        String customerName = cusName.getText();
        String carIDText = carID.getText();
        String CarModel = carModel.getText();
        String RentDate = new SimpleDateFormat("yyyy-MM-dd").format(rentDate.getDate());
        String DueDate = new SimpleDateFormat("yyyy-MM-dd").format(dueDate.getDate());

        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/car_rental", "root", "");
            String query = "UPDATE rentcar SET registationID=?, customerName=?, carID=?, carModel=?, rentDate=?, dueDate=? WHERE rentID=?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, regID);
            pst.setString(2, customerName);
            pst.setString(3, carIDText);
            pst.setString(4, CarModel);
            pst.setString(5, RentDate);
            pst.setString(6, DueDate);
            pst.setString(7, RentID);
            int rowsUpdated = pst.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Record updated successfully.");
                loadRentData(); // Reload data in the table
                clearFields();
                // Update rentID field
                rentID.setText(String.valueOf(getNextRentID()));
            } else {
                JOptionPane.showMessageDialog(null, "Error updating record.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating record: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
    }
    }//GEN-LAST:event_updateBtnActionPerformed

    
    private void loadRentData() {
        try {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/car_rental", "root", "");
        String query = "SELECT rentID, registationID, customerName, carID, carModel, rentDate, dueDate FROM rentcar";
        PreparedStatement pst = con.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = (DefaultTableModel) rentTable.getModel();
        model.setRowCount(0); // Clear existing data

        while (rs.next()) {
            Object[] row = {
                rs.getInt("rentID"),
                rs.getInt("registationID"),
                rs.getString("customerName"),
                rs.getInt("carID"),
                rs.getString("carModel"),
                rs.getDate("rentDate"),
                rs.getDate("dueDate")
            };
            model.addRow(row);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error loading rent data: " + e.getMessage());
    }
}
    private void carIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carIDActionPerformed
        String carIDText = carID.getText().trim();
    
    if (!carIDText.isEmpty()) {
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/car_rental", "root", "")) {
            String query = "SELECT  carModel, availability, price FROM cars WHERE carID = ?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, carIDText);
            ResultSet rs = pst.executeQuery();
            
            if (rs.next()) {
                // Populate the text fields with the retrieved data
                
                
                carModel.setText(rs.getString("carModel"));
                availability.setText(rs.getString("availability"));
                price.setText(rs.getString("price"));
            } else {
                // Clear the text fields if no data found for the entered rent ID
                clearFields();
                JOptionPane.showMessageDialog(null, "No data found for the entered rent ID.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error retrieving data from the database: " + e.getMessage());
        }
    } else {
        // Clear the text fields if rent ID field is empty
        clearFields();
    }
               
    }//GEN-LAST:event_carIDActionPerformed
   
    
  
    
    
    private void carModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carModelActionPerformed

    private void rentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rentTableMouseClicked
        int selectedRow = rentTable.getSelectedRow();
    DefaultTableModel model = (DefaultTableModel) rentTable.getModel();

    if (selectedRow >= 0) {
        rentID.setText(model.getValueAt(selectedRow, 0).toString());
        registrationID.setText(model.getValueAt(selectedRow, 1).toString());
        cusName.setText(model.getValueAt(selectedRow, 2).toString());
        carID.setText(model.getValueAt(selectedRow, 3).toString());
        carModel.setText(model.getValueAt(selectedRow, 4).toString());
        rentDate.setDate((java.sql.Date) model.getValueAt(selectedRow, 5));
        dueDate.setDate((java.sql.Date) model.getValueAt(selectedRow, 6));
        price.setText(model.getValueAt(selectedRow, 7).toString());
    }
    }//GEN-LAST:event_rentTableMouseClicked

    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed
        
       
    }//GEN-LAST:event_searchBoxActionPerformed

    private void resetBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarRent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarRent().setVisible(true);
            }
        });
    
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField availability;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField carID;
    private javax.swing.JTextField carModel;
    private javax.swing.JTextField cusName;
    private javax.swing.JButton deleteBtn;
    private com.toedter.calendar.JDateChooser dueDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField price;
    private javax.swing.JTextField registrationID;
    private com.toedter.calendar.JDateChooser rentDate;
    private javax.swing.JTextField rentID;
    private javax.swing.JTable rentTable;
    private javax.swing.JButton resetBtn1;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
